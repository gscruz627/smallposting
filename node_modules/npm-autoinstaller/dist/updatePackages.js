'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkForUpdates = exports.changedFilesToArray = undefined;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _managers = require('./managers');

var _log = require('./log');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * changed files to array
 *
 * @desc    converts the output of the diff commands to an array
 * @param   {string} files - string with all files
 * @return  {array}
 */
var changedFilesToArray = exports.changedFilesToArray = function changedFilesToArray(files) {
  var changedFiles = files;
  if (typeof changedFiles === 'string') {
    changedFiles = changedFiles.split('\n');
  }

  return changedFiles;
};

/**
 * check for updates
 *
 * @desc    checks if a changed file should trigger an install
 * @param   {array} files - all changed files
 */
var checkForUpdates = exports.checkForUpdates = function checkForUpdates(files) {
  var changedFiles = changedFilesToArray(files);
  var managers = {};

  // check if any file from a package manager got changed
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = changedFiles[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var file = _step.value;
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = _managers.allManagers[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var _manager = _step3.value;

          if (_manager.isDependencyFile(file)) {
            if (!managers[_manager.name]) {
              managers[_manager.name] = [];
            }

            var base = _path2.default.dirname(file);
            if (managers[_manager.name].indexOf(base) < 0) {
              managers[_manager.name].push(base);
            }
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }
    }

    // update all managers
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  if (Object.keys(managers).length > 0) {
    (0, _log.separator)();
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = Object.keys(managers)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var manager = _step2.value;

        (0, _managers.getManager)(manager).update(managers[manager]);
        (0, _log.separator)();
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  }
};