'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.config = exports.loadFile = exports.loadUserConfig = exports.loadConfig = undefined;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _deepmerge = require('deepmerge');

var _deepmerge2 = _interopRequireDefault(_deepmerge);

var _paths = require('./paths');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * specifies the default config
 */
var defaultConfig = {
  npm: {
    do: 'install',
    fallback: 'install',
    command: 'npm prune && npm install',
    files: ['package.json', 'package-lock.json', 'npm-shrinkwrap.json'],
    excludedFolders: ['node_modules']
  },
  bower: {
    do: 'install',
    fallback: 'install',
    command: 'bower install',
    files: ['bower.json'],
    excludedFolders: ['bower_components']
  },
  composer: {
    do: 'install',
    fallback: 'install',
    command: 'composer install',
    files: ['composer.json', 'composer.lock'],
    excludedFolders: ['vendor']
  },
  userConfig: 'autoinstaller.json'
};

/**
 * config for deep merging the default config with the user config
 */
var mergeConfig = {
  arrayMerge: function arrayMerge(dest, source) {
    return source;
  }
};

/**
 * load config
 *
 * @desc    load the npm-autoinstaller config from the package.json file and custom user configs
 * @return  {object}
 */
var loadConfig = exports.loadConfig = function loadConfig() {
  return loadUserConfig(defaultConfig, 'package.json', 'autoinstaller');
};

/**
 * load user config
 *
 * @desc    load the config from the given file and merge it with the previous one
 * @param   {object} currentConfig - current config
 * @param   {file} file - filename of the user config
 * @param   {string} topLevelProp - name of the property in which the config is stored inside the file (optional)
 * @param   {boolean} recursive - if it should recursively load user configs (optional)
 * @return  {object}
 */
var loadUserConfig = exports.loadUserConfig = function loadUserConfig(currentConfig, file) {
  var topLevelProp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var recursive = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

  var fileContent = loadFile(file);

  // return current config if file does not exist
  if (fileContent === null) {
    return currentConfig;
  }

  var userConfig = topLevelProp === null ? fileContent : fileContent[topLevelProp] || {};
  var mergedConfig = (0, _deepmerge2.default)(currentConfig, userConfig, mergeConfig);

  if (mergedConfig.userConfig && mergedConfig.userConfig !== file && recursive) {
    return loadUserConfig(mergedConfig, mergedConfig.userConfig);
  }

  return mergedConfig;
};

/**
 * load file
 *
 * @desc    load and parse a json config file
 * @param   {string} file - path to the file in the project root
 * @return  {object}
 */
var loadFile = exports.loadFile = function loadFile(file) {
  var path = _paths.rootPath + '/' + file;
  if (!_fs2.default.existsSync(path)) {
    return null;
  }

  var content = _fs2.default.readFileSync(path);

  // parse the file
  try {
    return JSON.parse(content);
  } catch (e) {
    return null;
  }
};

var config = exports.config = loadConfig();